// Mocks generated by Mockito 5.4.5 from annotations
// in fit_zone/test/ui/auth/complete_register/view/complete_register_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:fit_zone/core/api/api_result.dart' as _i6;
import 'package:fit_zone/data/model/register_response/register_response.dart'
    as _i7;
import 'package:fit_zone/data/model/register_response/register_user_model.dart'
    as _i4;
import 'package:fit_zone/domain/repo_contract/register_repo.dart' as _i2;
import 'package:fit_zone/domain/use_cases/register_usecase.dart' as _i3;
import 'package:fit_zone/ui/Auth/complete_register/view_model/complete_register_cubit.dart'
    as _i9;
import 'package:fit_zone/ui/Auth/complete_register/view_model/complete_register_intent.dart'
    as _i10;
import 'package:flutter_bloc/flutter_bloc.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRegisterRepo_0 extends _i1.SmartFake implements _i2.RegisterRepo {
  _FakeRegisterRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterUseCase_1 extends _i1.SmartFake
    implements _i3.RegisterUseCase {
  _FakeRegisterUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRegisterUserModel_2 extends _i1.SmartFake
    implements _i4.RegisterUserModel {
  _FakeRegisterUserModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i3.RegisterUseCase {
  MockRegisterUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.RegisterRepo get registerContract => (super.noSuchMethod(
        Invocation.getter(#registerContract),
        returnValue: _FakeRegisterRepo_0(
          this,
          Invocation.getter(#registerContract),
        ),
      ) as _i2.RegisterRepo);

  @override
  _i5.Future<_i6.ApiResult<_i7.RegisterResponse>> invoke(
          {required _i4.RegisterUserModel? userModel}) =>
      (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [],
          {#userModel: userModel},
        ),
        returnValue: _i5.Future<_i6.ApiResult<_i7.RegisterResponse>>.value(
            _i8.dummyValue<_i6.ApiResult<_i7.RegisterResponse>>(
          this,
          Invocation.method(
            #invoke,
            [],
            {#userModel: userModel},
          ),
        )),
      ) as _i5.Future<_i6.ApiResult<_i7.RegisterResponse>>);
}

/// A class which mocks [CompleteRegisterCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockCompleteRegisterCubit extends _i1.Mock
    implements _i9.CompleteRegisterCubit {
  MockCompleteRegisterCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RegisterUseCase get registerUseCase => (super.noSuchMethod(
        Invocation.getter(#registerUseCase),
        returnValue: _FakeRegisterUseCase_1(
          this,
          Invocation.getter(#registerUseCase),
        ),
      ) as _i3.RegisterUseCase);

  @override
  _i4.RegisterUserModel get user => (super.noSuchMethod(
        Invocation.getter(#user),
        returnValue: _FakeRegisterUserModel_2(
          this,
          Invocation.getter(#user),
        ),
      ) as _i4.RegisterUserModel);

  @override
  set user(_i4.RegisterUserModel? _user) => super.noSuchMethod(
        Invocation.setter(
          #user,
          _user,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get currentIndex => (super.noSuchMethod(
        Invocation.getter(#currentIndex),
        returnValue: 0,
      ) as int);

  @override
  set currentIndex(int? _currentIndex) => super.noSuchMethod(
        Invocation.setter(
          #currentIndex,
          _currentIndex,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.RegisterStates get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i8.dummyValue<_i9.RegisterStates>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i9.RegisterStates);

  @override
  _i5.Stream<_i9.RegisterStates> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i9.RegisterStates>.empty(),
      ) as _i5.Stream<_i9.RegisterStates>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  void doIntent(_i10.CompleteRegisterIntent? Intent) => super.noSuchMethod(
        Invocation.method(
          #doIntent,
          [Intent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i9.RegisterStates? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i11.Change<_i9.RegisterStates>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
