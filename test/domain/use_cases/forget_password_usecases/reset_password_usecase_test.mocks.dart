// Mocks generated by Mockito 5.4.5 from annotations
// in fit_zone/test/domain/use_cases/forget_password_usecases/reset_password_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:fit_zone/core/api/api_result.dart' as _i4;
import 'package:fit_zone/data/model/forget_pass_response.dart' as _i5;
import 'package:fit_zone/data/model/otp_response.dart' as _i7;
import 'package:fit_zone/data/model/reset_password_response.dart' as _i8;
import 'package:fit_zone/domain/repo_contract/forget_password_repo.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ForgetPasswordRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockForgetPasswordRepo extends _i1.Mock
    implements _i2.ForgetPasswordRepo {
  MockForgetPasswordRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.ApiResult<_i5.ForgetPasswordResponse>> forgetPassword(
          {required String? email}) =>
      (super.noSuchMethod(
        Invocation.method(
          #forgetPassword,
          [],
          {#email: email},
        ),
        returnValue:
            _i3.Future<_i4.ApiResult<_i5.ForgetPasswordResponse>>.value(
                _i6.dummyValue<_i4.ApiResult<_i5.ForgetPasswordResponse>>(
          this,
          Invocation.method(
            #forgetPassword,
            [],
            {#email: email},
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<_i5.ForgetPasswordResponse>>);

  @override
  _i3.Future<_i4.ApiResult<_i7.OtpResponse>> verifyResetCode(
          {required String? resetCode}) =>
      (super.noSuchMethod(
        Invocation.method(
          #verifyResetCode,
          [],
          {#resetCode: resetCode},
        ),
        returnValue: _i3.Future<_i4.ApiResult<_i7.OtpResponse>>.value(
            _i6.dummyValue<_i4.ApiResult<_i7.OtpResponse>>(
          this,
          Invocation.method(
            #verifyResetCode,
            [],
            {#resetCode: resetCode},
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<_i7.OtpResponse>>);

  @override
  _i3.Future<_i4.ApiResult<_i8.ResetPasswordResponse>> resetPassword({
    required String? email,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetPassword,
          [],
          {
            #email: email,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i3.Future<_i4.ApiResult<_i8.ResetPasswordResponse>>.value(
            _i6.dummyValue<_i4.ApiResult<_i8.ResetPasswordResponse>>(
          this,
          Invocation.method(
            #resetPassword,
            [],
            {
              #email: email,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i3.Future<_i4.ApiResult<_i8.ResetPasswordResponse>>);
}
